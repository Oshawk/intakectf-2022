from math import gcd, lcm

from Crypto.Util.Padding import pad
from Crypto.Util.number import getStrongPrime, isPrime


def next_prime(n):
    while True:
        n += 1
        if isPrime(n):
            return n


def main():
    e = 3

    p = getStrongPrime(1024, e=e)
    q = next_prime(p)
    n = p * q
    t = lcm(p - 1, q - 1)

    assert gcd(e, t) == 1

    d = pow(e, -1, t)

    with open("flag.txt", "rb") as f:
        pt = int.from_bytes(pad(f.read(), (n.bit_length() - 1) // 8), "big")

    ct = pow(pt, e, n)

    print(f"e = {e}")  # e = 3
    print(f"n = {n}")  # n = 28531936538966269982422536249992944044867780226879199028059562623172760857599544643785221855875398028565964718251484595426975517583618200187281733081648475013792816100236898038967153236476781324074963106810812658031767410802401171875042724893111197973673842356505768115191561889648405021470610240860210678558560665563722146027431774654864807700600309973091520337935909032232103967088715644134152543399627123936575563187493887880226156454810068733604850156852288798135012455532690578514710378608032091049140748333183182615505623666878296523496782058805235514294200996231641303485144471819369519306021234882640792365827
    print(f"ct = {ct}")  # ct = 10548222793179674290111158110807253096925845780381105326229498223425680685844621344541795095344121089273836140329698920067810906158956406068284573854290573002051779556848971138652771430754739163571030220713383111795057996307944527451658022655097623061695306517302056011679871000588146156634933463156881219856614430099984057076758800332279189441687267810063938978618333557102736109549522784712062310998751236321617586037695800879576636931490246860982423401644759198535080414778393651359784545472448616786470816886572985937815426807253598816473989179620483265305723196690110723347959350610514128406702658564595931235585


if __name__ == '__main__':
    main()
